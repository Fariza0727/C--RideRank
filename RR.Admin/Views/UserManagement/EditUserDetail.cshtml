@model RR.Dto.UserDetailDto
@{
    ViewData["Title"] = "UpdatePlayerDetail";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header card-header-primary">
                    <h4 class="card-title">Player Detail</h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("UpdateUserDetail", "UserManagement", FormMethod.Post))
                    {
                        @Html.HiddenFor(x => x.Id)
                        @Html.HiddenFor(x => x.IsActive)
                        @Html.HiddenFor(x => x.UserId)
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Player Name</label>
                                    @Html.TextBoxFor(x => x.UserName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.UserName)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">First name</label>
                                    @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.FirstName)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Last name</label>
                                    @Html.TextBoxFor(x => x.LastName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.LastName)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Email Address</label>
                                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(x => x.Email)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Phone Number</label>
                                    @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.PhoneNumber)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Country</label>
                                    @Html.DropDownListFor(model => model.PlayerType, Model.UserRoleList, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.Country)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Address1</label>
                                    @Html.TextBoxFor(x => x.Address1, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.Address1)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Address2</label>
                                    @Html.TextBoxFor(x => x.Address2, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.Address2)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Address3</label>
                                    @Html.TextBoxFor(x => x.Address3, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.Address3)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Country</label>
                                    @Html.DropDownListFor(model => model.Country, Model.CountryList, "Select Country", new { @onchange = "getstates(this)", @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.Country)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">State</label>
                                    @Html.DropDownListFor(model => model.State, Model.StateList, "Select State", new { @onchange = "getcities(this)", @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.State)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">City</label>
                                    @Html.TextBoxFor(x => x.City, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.City)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Wallet Token</label>
                                    @Html.TextBoxFor(model => model.WalletToken, new { @class = "form-control" })

                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group bmd-form-group is-focused">
                                    <label class="bmd-label-floating">Zip Code</label>
                                    @Html.TextBoxFor(model => model.ZipCode, new { @class = "form-control" })

                                </div>
                            </div>
                        </div>
                        <a href="/players" class="btn btn-primary pull-right">Back To Players</a>
                        <button type="submit" class="btn btn-primary pull-right">Update</button>
                        <div class="clearfix"></div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        function getstates(th) {

            var x = $(th).children("option:selected").val();

            $.ajax({
                type: "Get",
                url: "/states",
                data: { countryId: x },
                success: function (result) {


                    $("#State").empty().append("<option class='state'>Select State</option>");
                    if (result != null && result.length > 0) {
                        $.each(result, function (data, value) {
                            $("#State").append($("<option class='state'></option>").val(value.value).html(value.text));
                        })
                    }
                },
                error: function () {

                }
            });
        }

        function getcities(th) {

            var urs = "/cities"
            var x = $(th).children("option:selected").val();

            $.ajax({
                type: "Post",
                url: urs,
                data: { countryId: $("#Country").children("option:selected").val(), stateId: x },
                success: function (result) {


                    $("#City").empty().append("<option class='city'>Select City</option>");
                    if (result != null && result.length > 0) {
                        $.each(result, function (data, value) {
                            $("#City").append($("<option class='city'></option>").val(value.value).html(value.text));
                        })
                    }
                },
                error: function () {
                    alert("error");
                }
            });
        }
    </script>
}
